#include <bits/stdc++.h>
using namespace std;

#define rep(i, a, b) for(int i = a; i < (b); ++i)
#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
const int N = 1000;
int n, cost[N], it[N*4], parent[N], num_child[N], inTour[N];
vector<int> vertice[N];
map<int,int> value;


void update (int node, int l, int r, int idx, int val) {
//    cerr << node << " " << l << " " << r <<  endl;
    if (idx > r || idx < l) return;
    if (l == r) {
        it[node] = val;
        return;
    }
    int mid = (l + r) >> 1;
    update(node * 2, l, mid, idx, val);
    update(node * 2 + 1, mid + 1, r,idx, val);
    it[node] = min(it[node] * 2, it[node*2+1]);

}
ll get(int id, int l, int r, int u, int v) {
    if (v < l || r < u) {
        return 1e9+7;
    }
    if (u <= l && r <= v) {
        return it[id];
    }
    int mid = (l + r) >> 1;

    return min(get(id * 2, l, mid, u, v), get(id * 2 + 1, mid + 1, r, u, v));
}
void dfs(int u, int preU) {
    if (vertice[u].size() == 0) {
        update(1,1,n,u, cost[u]);
    } else {
        update(1,1,n,u, 1e9);
    }

//    cerr << u << "ok" << endl;
    for (auto v : vertice[u]) {
        if (v == preU) continue;
        dfs(v, u);
    }

}
void query() {
    int min_value = get(1,1,n,1,n);
    cout << min_value << endl;
    int ind = value[min_value];
    cout << ind << " ";
    update(1,1,n, ind, 1e9);
    int u = parent[ind];
    num_child[u]--;
    if (num_child[u] == 0) { // become a leaf
        update(1,1,n, u, cost[u]);
    }

}
signed main() {
    ios::sync_with_stdio(0); cin.tie(0);
    cin.exceptions(cin.failbit);
    cin >> n;
    for (int i = 2; i <= n; i++) {
        int u; cin >> u;
        vertice[u].push_back(i);
        parent[i] = u;
        num_child[u]++;
    }
    vector<int> temp;
    for (int i = 1; i <= n; i++) {
        cin >> cost[i];
        value[cost[i]] = i;
    }
    dfs(1 ,0);
    cerr << "OK" << endl;
    int total_node = n;
    while (total_node--) {
        query();
    }

}
